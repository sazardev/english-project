---
import MainLayout from "../../layouts/MainLayout.astro";
import BlogCard from "../../components/BlogCard.astro";
import { getCollection } from "astro:content";

const allPosts = await getCollection("blog");

// Sort all posts by publish date (newest first)
const sortedPosts = allPosts.sort((a, b) => {
  const dateA = a.data.publishDate || new Date(0);
  const dateB = b.data.publishDate || new Date(0);
  return dateB.getTime() - dateA.getTime();
});

// Get unique categories and levels for filters
const categories = [...new Set(allPosts.map((post) => post.data.category))];
const levels = ["beginner", "intermediate", "advanced"];

// Group posts by category and level for stats
const postsByCategory = allPosts.reduce(
  (acc, post) => {
    const category = post.data.category;
    if (!acc[category]) acc[category] = [];
    acc[category].push(post);
    return acc;
  },
  {} as Record<string, any[]>
);

const postsByLevel = {
  beginner: allPosts.filter((post) => post.data.level === "beginner"),
  intermediate: allPosts.filter((post) => post.data.level === "intermediate"),
  advanced: allPosts.filter((post) => post.data.level === "advanced"),
};
---

<MainLayout
  title="All Lessons - English Project"
  description="Browse all English learning resources organized by level and category. Find grammar, vocabulary, speaking, and listening lessons."
>
  <div class="blog-header">
    <div class="container">
      <h1>English Learning Resources</h1>
      <p class="blog-description">
        Discover comprehensive English lessons organized by skill level and
        learning category. All content is community-contributed and completely
        free.
      </p>

      <!-- Stats -->
      <div class="stats">
        <div class="stat">
          <span class="stat-number">{allPosts.length}</span>
          <span class="stat-label">Total Lessons</span>
        </div>
        <div class="stat">
          <span class="stat-number">{categories.length}</span>
          <span class="stat-label">Categories</span>
        </div>
        <div class="stat">
          <span class="stat-number">3</span>
          <span class="stat-label">Skill Levels</span>
        </div>
      </div>
    </div>
  </div>
  <!-- Filters -->
  <section class="filters">
    <div class="container">
      <div class="filter-section">
        <h3>Filter by Level</h3>
        <div class="filter-grid">
          <button
            class="filter-item active"
            data-filter-type="level"
            data-filter-value=""
          >
            <span class="filter-icon">üåê</span>
            <span class="filter-name">All Levels</span>
            <span class="filter-count">{allPosts.length}</span>
          </button>
          <button
            class="filter-item beginner"
            data-filter-type="level"
            data-filter-value="beginner"
          >
            <span class="filter-icon">üå±</span>
            <span class="filter-name">Beginner</span>
            <span class="filter-count">{postsByLevel.beginner.length}</span>
          </button>
          <button
            class="filter-item intermediate"
            data-filter-type="level"
            data-filter-value="intermediate"
          >
            <span class="filter-icon">üöÄ</span>
            <span class="filter-name">Intermediate</span>
            <span class="filter-count">{postsByLevel.intermediate.length}</span>
          </button>
          <button
            class="filter-item advanced"
            data-filter-type="level"
            data-filter-value="advanced"
          >
            <span class="filter-icon">üéØ</span>
            <span class="filter-name">Advanced</span>
            <span class="filter-count">{postsByLevel.advanced.length}</span>
          </button>
        </div>
      </div>

      <div class="filter-section">
        <h3>Filter by Category</h3>
        <div class="filter-grid category-filters">
          {
            categories.map((category) => (
              <button
                class="filter-item"
                data-filter-type="category"
                data-filter-value={category}
              >
                <span class="filter-icon">
                  {category === "grammar" && "üìù"}
                  {category === "vocabulary" && "üìö"}
                  {category === "speaking" && "üó£Ô∏è"}
                  {category === "listening" && "üëÇ"}
                  {category === "writing" && "‚úçÔ∏è"}
                  {category === "reading" && "üìñ"}
                  {category === "pronunciation" && "üîä"}
                  {category === "culture" && "üåç"}
                </span>
                <span class="filter-name">
                  {category.charAt(0).toUpperCase() + category.slice(1)}
                </span>
                <span class="filter-count">
                  {postsByCategory[category].length}
                </span>
              </button>
            ))
          }
        </div>
      </div>

      <div class="active-filters" style="display: none;">
        <h4>Active Filters:</h4>
        <div class="filter-tags">
          <button class="clear-all-filters">Clear All</button>
        </div>
      </div>
    </div>
  </section>
  <!-- Posts Grid -->
  <section class="posts-section">
    <div class="container">
      <div class="posts-header">
        <h2 id="posts-title">All Lessons ({sortedPosts.length})</h2>
        <p class="text-light" id="posts-subtitle">Sorted by newest first</p>
      </div>

      <div class="posts-grid" id="posts-grid">
        {sortedPosts.map((post) => <BlogCard post={post} />)}
      </div>

      <div class="empty-state" id="empty-state" style="display: none;">
        <h3>No lessons found for this filter</h3>
        <p>
          Try adjusting your filters or <button class="clear-all-filters"
            >view all lessons</button
          >.
        </p>
        <a
          href="https://github.com/sazardev/english-project"
          class="btn btn-primary"
        >
          Contribute a Lesson
        </a>
      </div>
    </div>
  </section>

  <!-- Contribute CTA -->
  <section class="contribute-cta">
    <div class="container text-center">
      <h2>Share Your Knowledge</h2>
      <p>
        Help other English learners by contributing your own lessons and
        resources. It's easy to get started with our GitHub-based contribution
        system.
      </p>
      <div class="cta-actions">
        <a
          href="https://github.com/sazardev/english-project"
          target="_blank"
          class="btn btn-primary"
        >
          Contribute on GitHub
        </a>
        <a href="/contribute" class="btn btn-secondary">
          Learn How to Contribute
        </a>
      </div>
    </div>
  </section>
</MainLayout>

<style>
  .blog-header {
    background: linear-gradient(
      135deg,
      var(--color-bg) 0%,
      var(--color-bg-secondary) 100%
    );
    padding: 3rem 0;
    margin-bottom: 3rem;
    text-align: center;
  }

  .blog-header h1 {
    font-size: 3rem;
    margin-bottom: 1rem;
  }

  .blog-description {
    font-size: 1.125rem;
    color: var(--color-text-light);
    max-width: 600px;
    margin: 0 auto 2rem;
    line-height: 1.6;
  }

  .stats {
    display: flex;
    justify-content: center;
    gap: 3rem;
    margin-top: 2rem;
  }

  .stat {
    text-align: center;
  }

  .stat-number {
    display: block;
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--color-primary);
    margin-bottom: 0.5rem;
  }

  .stat-label {
    font-size: 0.875rem;
    color: var(--color-text-light);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .filters {
    background: var(--color-bg-secondary);
    padding: 3rem 0;
    margin-bottom: 3rem;
  }

  .filter-section {
    margin-bottom: 2rem;
  }

  .filter-section:last-child {
    margin-bottom: 0;
  }

  .filter-section h3 {
    margin-bottom: 1rem;
    font-size: 1.25rem;
  }

  .filter-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
  }

  .category-filters {
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  }

  .filter-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    background: var(--color-bg);
    border: 2px solid var(--color-border);
    border-radius: var(--radius);
    text-decoration: none;
    color: var(--color-text);
    transition: all 0.2s ease;
  }

  .filter-item:hover {
    border-color: var(--color-primary);
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
    text-decoration: none;
    color: var(--color-text);
  }

  .filter-item.active {
    border-color: var(--color-primary);
    background: var(--color-primary);
    color: white;
  }

  .filter-item.beginner:hover {
    border-color: #10b981;
  }
  .filter-item.intermediate:hover {
    border-color: #f59e0b;
  }
  .filter-item.advanced:hover {
    border-color: #ef4444;
  }

  .filter-icon {
    font-size: 1.5rem;
  }

  .filter-name {
    flex: 1;
    font-weight: 500;
  }

  .filter-count {
    background: var(--color-bg-secondary);
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    color: var(--color-text-light);
  }
  .filter-item.active .filter-count {
    background: rgba(255, 255, 255, 0.2);
    color: white;
  }

  .active-filters {
    margin-top: 2rem;
    padding: 1.5rem;
    background: var(--color-bg);
    border-radius: var(--radius);
    border: 1px solid var(--color-border);
  }

  .active-filters h4 {
    margin: 0 0 1rem 0;
    font-size: 1rem;
    color: var(--color-text);
  }

  .filter-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    align-items: center;
  }

  .filter-tag {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: var(--color-primary);
    color: white;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .remove-filter {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 18px;
    height: 18px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    color: white;
    text-decoration: none;
    font-weight: bold;
    font-size: 14px;
    line-height: 1;
    transition: background-color 0.2s ease;
  }

  .remove-filter:hover {
    background: rgba(255, 255, 255, 0.3);
    color: white;
    text-decoration: none;
  }

  .clear-all-filters {
    padding: 0.5rem 1rem;
    background: var(--color-text-light);
    color: white;
    border-radius: 20px;
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 500;
    transition: background-color 0.2s ease;
  }

  .clear-all-filters:hover {
    background: var(--color-text);
    color: white;
    text-decoration: none;
  }

  .posts-section {
    padding: 2rem 0;
  }

  .posts-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .posts-header h2 {
    margin-bottom: 0.5rem;
  }

  .posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .empty-state {
    text-align: center;
    padding: 4rem 2rem;
    background: var(--color-bg-secondary);
    border-radius: var(--radius);
  }

  .empty-state h3 {
    margin-bottom: 1rem;
    color: var(--color-text-light);
  }

  .empty-state p {
    margin-bottom: 2rem;
    color: var(--color-text-light);
  }

  .contribute-cta {
    background: var(--color-bg-secondary);
    padding: 4rem 0;
    margin-top: 4rem;
  }

  .contribute-cta h2 {
    margin-bottom: 1rem;
  }

  .contribute-cta p {
    font-size: 1.125rem;
    color: var(--color-text-light);
    max-width: 600px;
    margin: 0 auto 2rem;
    line-height: 1.6;
  }

  .cta-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  @media (max-width: 768px) {
    .blog-header h1 {
      font-size: 2.25rem;
    }

    .stats {
      gap: 2rem;
    }

    .stat-number {
      font-size: 2rem;
    }

    .filter-grid {
      grid-template-columns: 1fr;
    }

    .posts-grid {
      grid-template-columns: 1fr;
    }

    .cta-actions {
      flex-direction: column;
      align-items: center;
    }
  }
</style>

<script is:inline>
  // Blog filtering functionality
  document.addEventListener("DOMContentLoaded", () => {
    let currentFilters = {
      level: "",
      category: "",
    };
    function collectPosts() {
      const postCards = document.querySelectorAll(".posts-grid .blog-card");
      return Array.from(postCards).map((card) => ({
        element: card,
        level: card.dataset.level || "",
        category: card.dataset.category || "",
        title: card.querySelector("h3")?.textContent || "",
      }));
    }

    function applyFilter(filterType, filterValue) {
      currentFilters[filterType] = filterValue;

      // Update URL without page reload
      const params = new URLSearchParams();
      if (currentFilters.level) {
        params.set("level", currentFilters.level);
      }
      if (currentFilters.category) {
        params.set("category", currentFilters.category);
      }

      const newUrl = params.toString()
        ? `${window.location.pathname}?${params.toString()}`
        : window.location.pathname;

      window.history.replaceState({}, "", newUrl);

      updateFilterButtons();
      filterPosts();
      updateActiveFilters();
      updatePostsHeader();
    }

    function clearAllFilters() {
      currentFilters = { level: "", category: "" };
      window.history.replaceState({}, "", window.location.pathname);

      updateFilterButtons();
      filterPosts();
      updateActiveFilters();
      updatePostsHeader();
    }

    function updateFilterButtons() {
      // Update level filter buttons
      document
        .querySelectorAll('[data-filter-type="level"]')
        .forEach((button) => {
          const isActive = button.dataset.filterValue === currentFilters.level;
          button.classList.toggle("active", isActive);
        });

      // Update category filter buttons
      document
        .querySelectorAll('[data-filter-type="category"]')
        .forEach((button) => {
          const isActive =
            button.dataset.filterValue === currentFilters.category;
          button.classList.toggle("active", isActive);
        });

      // Special case for "All Levels" button
      const allLevelsButton = document.querySelector(
        '[data-filter-type="level"][data-filter-value=""]'
      );
      if (allLevelsButton) {
        const isActive = !currentFilters.level && !currentFilters.category;
        allLevelsButton.classList.toggle("active", isActive);
      }
    }
    function filterPosts() {
      const allPosts = collectPosts();
      let visibleCount = 0;

      allPosts.forEach((post) => {
        const matchesLevel =
          !currentFilters.level || post.level === currentFilters.level;
        const matchesCategory =
          !currentFilters.category || post.category === currentFilters.category;
        const isVisible = matchesLevel && matchesCategory;

        if (post.element) {
          post.element.style.display = isVisible ? "block" : "none";
          if (isVisible) visibleCount++;
        }
      });

      // Show/hide empty state
      const emptyState = document.getElementById("empty-state");
      if (emptyState) {
        emptyState.style.display = visibleCount === 0 ? "block" : "none";
      }

      // Hide posts grid if no results
      const postsGrid = document.getElementById("posts-grid");
      if (postsGrid) {
        postsGrid.style.display = visibleCount === 0 ? "none" : "grid";
      }
    }

    function updateActiveFilters() {
      const activeFiltersSection = document.querySelector(".active-filters");
      const filterTags = document.querySelector(".filter-tags");

      if (!activeFiltersSection || !filterTags) return;

      // Clear existing filter tags (except clear all button)
      const existingTags = filterTags.querySelectorAll(".filter-tag");
      existingTags.forEach((tag) => tag.remove());

      const hasActiveFilters = currentFilters.level || currentFilters.category;
      activeFiltersSection.style.display = hasActiveFilters ? "block" : "none";

      if (hasActiveFilters) {
        const clearButton = filterTags.querySelector(".clear-all-filters");

        if (currentFilters.level) {
          const levelTag = createFilterTag(
            "Level",
            currentFilters.level,
            "level"
          );
          filterTags.insertBefore(levelTag, clearButton);
        }

        if (currentFilters.category) {
          const categoryTag = createFilterTag(
            "Category",
            currentFilters.category,
            "category"
          );
          filterTags.insertBefore(categoryTag, clearButton);
        }
      }
    }

    function createFilterTag(label, value, filterType) {
      const tag = document.createElement("span");
      tag.className = "filter-tag";
      tag.innerHTML = `
        ${label}: ${value.charAt(0).toUpperCase() + value.slice(1)}
        <button class="remove-filter" data-filter-type="${filterType}">√ó</button>
      `;

      // Add click event to remove button
      const removeButton = tag.querySelector(".remove-filter");
      if (removeButton) {
        removeButton.addEventListener("click", () => {
          applyFilter(filterType, "");
        });
      }

      return tag;
    }

    function updatePostsHeader() {
      const title = document.getElementById("posts-title");
      const subtitle = document.getElementById("posts-subtitle");

      if (!title || !subtitle) return;

      const allPosts = collectPosts();
      const visiblePosts = allPosts.filter((post) => {
        const matchesLevel =
          !currentFilters.level || post.level === currentFilters.level;
        const matchesCategory =
          !currentFilters.category || post.category === currentFilters.category;
        return matchesLevel && matchesCategory;
      });

      const hasFilters = currentFilters.level || currentFilters.category;

      if (hasFilters) {
        let titleText = "";
        if (currentFilters.level) {
          titleText += `${currentFilters.level.charAt(0).toUpperCase() + currentFilters.level.slice(1)} Level `;
        }
        if (currentFilters.category) {
          titleText += `${currentFilters.category.charAt(0).toUpperCase() + currentFilters.category.slice(1)} `;
        }
        titleText += `Lessons (${visiblePosts.length})`;

        title.textContent = titleText;
        subtitle.textContent =
          "Showing filtered results ‚Ä¢ Sorted by newest first";
      } else {
        title.textContent = `All Lessons (${visiblePosts.length})`;
        subtitle.textContent = "Sorted by newest first";
      }
    }
    function checkUrlParams() {
      const params = new URLSearchParams(window.location.search);
      const level = params.get("level");
      const category = params.get("category");

      if (level) {
        applyFilter("level", level);
      }
      if (category) {
        applyFilter("category", category);
      }
    }

    // Bind events
    document.querySelectorAll("[data-filter-type]").forEach((button) => {
      button.addEventListener("click", (e) => {
        e.preventDefault();
        const filterType = button.dataset.filterType;
        const filterValue = button.dataset.filterValue;
        applyFilter(filterType, filterValue);
      });
    });

    document.querySelectorAll(".clear-all-filters").forEach((button) => {
      button.addEventListener("click", (e) => {
        e.preventDefault();
        clearAllFilters();
      });
    });

    // Initialize
    checkUrlParams();
  });
</script>
