---
import BaseLayout from "./BaseLayout.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { type CollectionEntry } from "astro:content";

export interface Props {
  title?: string;
  description?: string;
  frontmatter?: CollectionEntry<"blog">["data"];
  post?: CollectionEntry<"blog">;
}

const { title, description, frontmatter, post } = Astro.props;

// Use post data if available, otherwise fallback to frontmatter or individual props
const postData = post?.data || frontmatter;
const pageTitle = title || postData?.title || "Blog Post";
const pageDescription =
  description || postData?.description || "English learning content";
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <Header />
  <main class="container">
    <article class="blog-post">
      <header class="blog-header">
        <div class="breadcrumb">
          <a href="/">Home</a>
          <span>/</span>
          <a href="/blog">Blog</a>
          <span>/</span>
          <span class="text-light">{postData?.category}</span>
        </div>
        <div class="level-badge">
          <span class={`badge badge-${postData?.level}`}>
            {postData?.level.toUpperCase()}
          </span>
        </div>

        <h1 class="blog-title">{postData?.title}</h1>

        {
          postData?.description && (
            <p class="blog-description text-lg text-light">
              {postData.description}
            </p>
          )
        }
        <div class="blog-meta">
          <div class="meta-item">
            <span class="meta-label">Category:</span>
            <span class="meta-value">{postData?.category}</span>
          </div>
          <div class="meta-item">
            <span class="meta-label">Level:</span>
            <span class="meta-value">{postData?.level}</span>
          </div>
          {
            postData?.tags && (
              <div class="meta-item">
                <span class="meta-label">Tags:</span>
                <div class="tags">
                  {postData.tags.map((tag: string) => (
                    <span class="tag">{tag}</span>
                  ))}
                </div>
              </div>
            )
          }
          {
            postData?.readingTime && (
              <div class="meta-item">
                <span class="meta-label">Reading time:</span>
                <span class="meta-value">{postData.readingTime} min</span>
              </div>
            )
          }
        </div>
      </header>

      <div class="blog-content">
        <slot />
      </div>

      <footer class="blog-footer">
        <div class="contribute-section">
          <h3>üí° Want to contribute?</h3>
          <p>
            Help improve this lesson or add new content by creating a Pull
            Request on GitHub!
          </p>
          <a
            href="https://github.com/sazardev/english-project"
            class="btn btn-primary"
          >
            üìù Contribute on GitHub
          </a>
        </div>
      </footer>
    </article>
  </main>
  <Footer />
</BaseLayout>

<style>
  main {
    min-height: calc(100vh - 140px);
    padding: 2rem 0;
  }

  .blog-post {
    max-width: 800px;
    margin: 0 auto;
  }

  .blog-header {
    margin-bottom: 3rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid var(--color-border-light);
  }

  .breadcrumb {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
    font-size: 0.875rem;
    color: var(--color-text-light);
  }

  .breadcrumb a {
    color: var(--color-primary);
    text-decoration: none;
  }

  .breadcrumb a:hover {
    text-decoration: underline;
  }

  .level-badge {
    margin-bottom: 1rem;
  }

  .badge {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .badge-beginner {
    background-color: #d4edda;
    color: #155724;
  }

  .badge-intermediate {
    background-color: #fff3cd;
    color: #856404;
  }

  .badge-advanced {
    background-color: #f8d7da;
    color: #721c24;
  }

  .blog-title {
    font-size: 2.5rem;
    font-weight: 700;
    line-height: 1.2;
    margin-bottom: 1rem;
    color: var(--color-text);
  }

  .blog-description {
    margin-bottom: 2rem;
    font-size: 1.125rem;
    line-height: 1.6;
  }

  .blog-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
    font-size: 0.875rem;
  }

  .meta-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .meta-label {
    font-weight: 600;
    color: var(--color-text);
  }

  .meta-value {
    color: var(--color-text-light);
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    background-color: var(--color-bg-secondary);
    color: var(--color-text-light);
    padding: 0.125rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
  }

  .blog-content {
    margin-bottom: 3rem;
    line-height: 1.7;
  }

  .blog-content :global(h2) {
    margin-top: 2.5rem;
    margin-bottom: 1rem;
    font-size: 1.875rem;
    font-weight: 600;
  }

  .blog-content :global(h3) {
    margin-top: 2rem;
    margin-bottom: 0.75rem;
    font-size: 1.5rem;
    font-weight: 600;
  }

  .blog-content :global(h4) {
    margin-top: 1.5rem;
    margin-bottom: 0.5rem;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .blog-content :global(p) {
    margin-bottom: 1.5rem;
  }

  .blog-content :global(ul),
  .blog-content :global(ol) {
    margin-bottom: 1.5rem;
    padding-left: 2rem;
  }

  .blog-content :global(li) {
    margin-bottom: 0.5rem;
  }

  .blog-content :global(.highlight) {
    background-color: #fef9c3;
    padding: 0.125rem 0.25rem;
    border-radius: 4px;
  }
  .blog-content :global(.example-box) {
    background-color: var(--color-bg-secondary);
    border-left: 4px solid var(--color-primary);
    padding: 1.5rem;
    margin: 1.5rem 0;
    border-radius: 0 var(--radius) var(--radius) 0;
  }

  .blog-content :global(.vocabulary-box) {
    background-color: #f0f9ff;
    border: 1px solid #0ea5e9;
    border-left: 4px solid #0ea5e9;
    padding: 1.5rem;
    margin: 1.5rem 0;
    border-radius: 0 var(--radius) var(--radius) 0;
  }

  .blog-content :global(.tip-box) {
    background-color: #f0fdf4;
    border: 1px solid #22c55e;
    border-left: 4px solid #22c55e;
    padding: 1.5rem;
    margin: 1.5rem 0;
    border-radius: 0 var(--radius) var(--radius) 0;
  }

  .blog-content :global(.definition-box) {
    background-color: #fef7ff;
    border: 1px solid #a855f7;
    border-left: 4px solid #a855f7;
    padding: 1.5rem;
    margin: 1.5rem 0;
    border-radius: 0 var(--radius) var(--radius) 0;
  }

  .blog-content :global(.cultural-note) {
    background-color: #fffbeb;
    border: 1px solid #f59e0b;
    border-left: 4px solid #f59e0b;
    padding: 1.5rem;
    margin: 1.5rem 0;
    border-radius: 0 var(--radius) var(--radius) 0;
  }

  .blog-content :global(.exercise-box) {
    background-color: #fdf2f8;
    border: 1px solid #ec4899;
    border-left: 4px solid #ec4899;
    padding: 1.5rem;
    margin: 1.5rem 0;
    border-radius: 0 var(--radius) var(--radius) 0;
  }

  .blog-content :global(.resources-box) {
    background-color: #f8fafc;
    border: 1px solid #64748b;
    border-left: 4px solid #64748b;
    padding: 1.5rem;
    margin: 1.5rem 0;
    border-radius: 0 var(--radius) var(--radius) 0;
  }

  .blog-content :global(.vocabulary-box strong),
  .blog-content :global(.tip-box strong),
  .blog-content :global(.definition-box strong),
  .blog-content :global(.cultural-note strong),
  .blog-content :global(.exercise-box strong),
  .blog-content :global(.resources-box strong) {
    color: inherit;
    font-weight: 600;
  }

  .blog-content :global(table) {
    width: 100%;
    border-collapse: collapse;
    margin: 1.5rem 0;
    background: var(--color-bg);
    border: 1px solid var(--color-border);
    border-radius: var(--radius);
    overflow: hidden;
  }

  .blog-content :global(th),
  .blog-content :global(td) {
    padding: 1rem;
    text-align: left;
    border-bottom: 1px solid var(--color-border-light);
  }

  .blog-content :global(th) {
    background-color: var(--color-bg-secondary);
    font-weight: 600;
    color: var(--color-text);
  }

  .blog-content :global(tr:last-child td) {
    border-bottom: none;
  }

  .blog-content :global(tr:hover) {
    background-color: var(--color-bg-secondary);
  }

  .blog-content :global(.tip) {
    background-color: #e8f5e8;
    border-left: 4px solid #28a745;
    padding: 1rem 1.5rem;
    margin: 1.5rem 0;
    border-radius: 0 var(--radius) var(--radius) 0;
  }

  .blog-content :global(.warning) {
    background-color: #fff8e1;
    border-left: 4px solid #ffc107;
    padding: 1rem 1.5rem;
    margin: 1.5rem 0;
    border-radius: 0 var(--radius) var(--radius) 0;
  }

  .blog-footer {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid var(--color-border-light);
  }

  .contribute-section {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 2rem;
    border-radius: var(--radius);
    text-align: center;
  }

  .contribute-section h3 {
    margin-bottom: 1rem;
    font-size: 1.5rem;
  }

  .contribute-section p {
    margin-bottom: 1.5rem;
    opacity: 0.9;
  }

  .contribute-section .btn {
    background-color: white;
    color: #667eea;
    border: none;
  }

  .contribute-section .btn:hover {
    background-color: #f8f9fa;
    color: #667eea;
  }

  @media (max-width: 768px) {
    .blog-title {
      font-size: 2rem;
    }

    .blog-meta {
      flex-direction: column;
      gap: 1rem;
    }

    .meta-item {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.25rem;
    }
  }
</style>
